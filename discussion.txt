================================================================================
Recursion

1. In your own words, what is recursion?

Recursion is different from other types of functions because it actually calls itself.

2. Why is it necessary to have a base case?

Without a base case, a recursive function could call itself indefinitenly. When the conditions of a base case are met, the function stops.

================================================================================
Graphs

1. What is a graph?

A graph is very similar to a tree. It is also composed of nodes. However, a graph can also contain loops.

2. How is a graph different from a tree?

In a tree, each node can have only one parent. So you can't loop around to other nodes.

3. Give an example of something that would be good to model with a graph.

The classic example of a graph model is mapping out the cheapest flight to a destination. Each node is a destination, and each leg of your journey is an edge between nodes labeled with a fare.

================================================================================
Performance of Different Data Structures

Fill in the missing spots in the chart with the correct runtimes. Do this by reasoning through how the data structures work, NOT by looking up the solution. Add-R means add to the right/end/top and Add-L means add to the left/beginning/bottom. There are X’s in the spots where that operation doesn’t make sense for that data structure (for instance, you can’t index a stack, or pop from the end of a queue). We’ve provided the first few answers for you.

================================================================================
Fill in the runtimes for the following actions for the table below:

Data Structure  Index   Search  Add-R   Add-L   Pop-L   Pop-R
Python List (Array) O(1)    O(n)    O(1)    O(n)    O(n)    O(1)
Linked List         O(n)    O(n)    O(1)    O(1)    O(1)    O(n)
Doubly-Linked List  O(n)    O(n)    O(1)    O(1)    O(1)    O(1)
Queue (as Array)    X       X       O(1)    X       O(n)    X
Queue (as LL)       X       X       O(1)    X       O(1)    X
Stack               X       X       O(1)    X       X       O(1)
Deque (as DLL)      X       X       O(1)    O(1)    O(1)    O(1)

Index: Find an item in the structure when you know its position
Search: Find an item in the structure when you know its data
Add(R/L): Set a key in set/dictionary or add node to tree
Pop(R/L): Remove a key or node

================================================================================
Fill in Runtime and Memory:

The answers for dictionary have been provided; you should fill in the rest:

Data Structure  Get        Add       Delete    Iterate Memory
Dictionary      O(1)       O(1)      O(1)      O(n)    medium
Set (Hash Map)  O(1)       O(1)      O(1)      O(n)    medium
Binary Search T O(log n)   O(log n)  O(log n)  O(1)    a little
Tree            O(n)       O(1)      O(1)      O(1)    a little

Get: Find an item in the structure
Add: Set a key in set/dictionary or add node to tree
Delete: Remove a key or node
Iterate: Find next item in data structure
Memory: Relative to data, how much memory is used? (Choices: a little, medium, or a lot)

================================================================================
Sorting

1. Describe in words how the Bubble Sort algorithm works.

In a bubble sort, higher numbers "bubble up" to the top. You start by comparing two numbers, and swapping the larger to the right. Continue until you reach the end of the list, and start again at the beginning until all the numbers are sorted.

2. Describe in words how the Merge Sort algorithm works.

In the merge sort, you take the items, divide them until they become lists of one (automatically sorted), then put them back together, sorting at each stage. 

3. Describe in words how the Quick Sort algorithm works.

In the quick sort algorithim, you pick a pivot point, then put smaller items to the left, and larger items to the right. Then pick another point and do the same thing until the whole list is sorted.
